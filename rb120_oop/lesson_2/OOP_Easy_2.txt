# Fix the Program - Mailable
class Customer
  attr_reader :name, :address, :city, :state, :zipcode
  include Mailable
end

class Employee
  attr_reader :name, :address, :city, :state, :zipcode
  include Mailable
end

# Fix the Program - Drivable
module Drivable
  def drive
  end
end

# Complete The Program - Houses
class House
  attr_reader :price
  include Comparable

  def initialize(price)
    @price = price
  end

  def <=>(other)
    price <=> other.price
  end
end

# Reverse Engineering
class Transform
  attr_reader :string
  def initialize(string)
    @string = string
  end

  def uppercase
    self.string.upcase
  end

  def self.lowercase(string)
    string.downcase
  end
end

# What Will This Do?
'ByeBye'
'HelloHello'

# Comparing Wallets
class Wallet
  include Comparable

  def initialize(amount)
    @amount = amount
  end

  def <=>(other_wallet)
    amount <=> other_wallet.amount
  end

  protected

  attr_reader :amount
end

# Pet Shelter
class Pet
  attr_reader :animal, :name
  def initialize(animal, name)
    @animal = animal
    @name = name
  end

  def to_s
    "a #{animal} named #{name}"
  end
end

class Owner
  attr_reader :name, :pets
  def initialize(name)
    @name = name
    @pets = []
  end

  def number_of_pets
    pets.count
  end

  def print_pets
    puts pets
  end
end

class Shelter
  attr_reader :pets
  def initialize
    @owners = {}
    @pets = []
  end

  def adopt(owner = nil, pet)
    if owner == nil
      @pets << pet
    else
      @owners[owner.name] ||= owner
      owner.pets << pet
    end
  end

  def print_adoptions
    @owners.each do |name, owner|
      puts "#{name} has adopted the following pets:"
      owner.print_pets
      puts
    end
    puts "The Animal Shelter has the following unadpoted pets:"
    puts pets
  end
end

# Fix the Program - Expander
  def to_s
    expand(3)
  end

# Moving
module Walkable
  def walk
    puts "#{name} #{gait} forward"
  end
end

class Person
  include Walkable
  attr_reader :name

  def initialize(name)
    @name = name
  end

  private

  def gait
    "strolls"
  end
end

class Cat
  include Walkable
  attr_reader :name

  def initialize(name)
    @name = name
  end

  private

  def gait
    "saunters"
  end
end

class Cheetah
  include Walkable
  attr_reader :name

  def initialize(name)
    @name = name
  end

  private

  def gait
    "runs"
  end
end

# Nobility
module Walkable
  def walk
    puts "#{self} #{gait} forward"
  end
end

class Person
  include Walkable
  attr_reader :name

  def initialize(name)
    @name = name
  end

  def to_s
    name
  end

  private

  def gait
    "strolls"
  end
end

class Cat
  include Walkable
  attr_reader :name

  def initialize(name)
    @name = name
  end

  def to_s
    name
  end


  private

  def gait
    "saunters"
  end
end

class Cheetah
  include Walkable
  attr_reader :name

  def initialize(name)
    @name = name
  end

  def to_s
    name
  end

  private

  def gait
    "runs"
  end
end

class Noble
  include Walkable
  attr_reader :name, :title

  def initialize(name, title)
    @name = name
    @title = title
  end

  def to_s
    title + " " + name
  end

  def gait
    "struts"
  end
end
