#Privacy
class Machine
  def start
    flip_switch(:on)
  end

  def stop
    flip_switch(:off)
  end

  private

  attr_writer :switch

  def flip_switch(desired_state)
    self.switch = desired_state
  end
end

#Fixed Array
class FixedArray
  def initialize(size)
    @array = Array.new(size)
  end

  def [](index)
    @array.fetch(index)
  end

  def []=(index, value)
    self[index]
    @array[index] = value
  end

  def to_a
    @array.clone
  end

  def to_s
    "#{@array}"
  end
end

#Students
class Student
  def initialize(name, year)
    @name = name
    @year = year
  end
end

class Graduate < Student
  def initialize(name, year, parking)
    super(name, year)
    @parking = parking
  end
end

class Undergraduate < Student
end

#Circular Queue
class CircularQueue
  attr_reader :array
  attr_accessor :queue
  def initialize(size)
    @array = Array.new(size)
    @queue = 0
  end

  def enqueue(num)
    array[queue] = num
    if queue == (array.size - 1)
      self.queue = 0
    else
      self.queue += 1
    end
  end

  def dequeue
    value = nil
    (queue...array.size).each do |i|
      if array[i]
        value = array[i]
        array[i] = nil
        break
      end
    end

    if !value
      (0...queue).each do |i|
        if array[i]
          value = array[i]
          array[i] = nil
          break
        end
      end
    end
    value
  end
end

#Stack Machine Interpretation
require 'set'

class MinilangError < StandardError; end
class BadTokenError < MinilangError; end
class EmptyStackError < MinilangError; end

class Minilang
  ACTIONS = Set.new %w(PUSH ADD SUB MULT DIV MOD POP PRINT)

  def initialize(program)
    @program = program
  end

  def eval
    @stack = []
    @register = 0
    @program.split.each { |token| eval_token(token) }
  rescue MinilangError => error
    puts error.message
  end

  private

  def eval_token(token)
    if ACTIONS.include?(token)
      send(token.downcase)
    elsif token =~ /\A[-+]?\d+\z/
      @register = token.to_i
    else
      raise BadTokenError, "Invalid token: #{token}"
    end
  end

  def push
    @stack.push(@register)
  end

  def pop
    raise EmptyStackError, "Empty stack!" if @stack.empty?
    @register = @stack.pop
  end

  def add
    @register += pop
  end

  def div
    @register /= pop
  end

  def mod
    @register %= pop
  end

  def mult
    @register *= pop
  end

  def sub
    @register -= pop
  end

  def print
    puts @register
  end
end

#Number Guesser Part 1
